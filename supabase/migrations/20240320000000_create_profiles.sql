-- Create enum types for permissions and roles
create type public.app_permission as enum ('profiles.read', 'profiles.write', 'profiles.delete');
create type public.app_role as enum ('customer', 'agent', 'admin');

-- Create role permissions table
create table public.role_permissions (
  id bigint generated by default as identity primary key,
  role app_role not null,
  permission app_permission not null,
  unique (role, permission)
);
comment on table public.role_permissions is 'Application permissions for each role.';

-- Create user roles table
create table public.user_roles (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users on delete cascade not null,
  role app_role not null,
  unique (user_id, role)
);
comment on table public.user_roles is 'Application roles for each user.';

-- Create profiles table extending auth.users
create table public.profiles (
  id uuid references auth.users on delete cascade primary key,
  full_name text,
  avatar_url text,
  metadata jsonb default '{}'::jsonb,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Create authorization function
create or replace function public.authorize(
  requested_permission app_permission
)
returns boolean as $$
declare
  bind_permissions int;
  user_role public.app_role;
begin
  -- Get user role from JWT claim
  select (auth.jwt() ->> 'user_role')::public.app_role into user_role;
  
  select count(*)
  into bind_permissions
  from public.role_permissions
  where role_permissions.permission = requested_permission
  and role_permissions.role = user_role;
  
  return bind_permissions > 0;
end;
$$ language plpgsql stable security definer set search_path = '';

-- Create auth hook function
create or replace function public.custom_access_token_hook(event jsonb)
returns jsonb
language plpgsql
stable
as $$
declare
  claims jsonb;
  user_role public.app_role;
begin
  -- Fetch the user role
  select role into user_role from public.user_roles where user_id = (event->>'user_id')::uuid;
  
  claims := event->'claims';
  
  if user_role is not null then
    claims := jsonb_set(claims, '{user_role}', to_jsonb(user_role));
  else
    claims := jsonb_set(claims, '{user_role}', 'null');
  end if;
  
  event := jsonb_set(event, '{claims}', claims);
  return event;
end;
$$;

-- Grant necessary permissions
grant usage on schema public to supabase_auth_admin;
grant execute on function public.custom_access_token_hook to supabase_auth_admin;
grant all on table public.user_roles to supabase_auth_admin;

-- RLS policies for profiles
alter table public.profiles enable row level security;

-- Trigger for updated_at
create trigger handle_updated_at before update on public.profiles
  for each row execute procedure moddatetime (updated_at);

-- Insert default role permissions
insert into public.role_permissions (role, permission)
values
  ('admin', 'profiles.read'),
  ('admin', 'profiles.write'),
  ('admin', 'profiles.delete'),
  ('agent', 'profiles.read'),
  ('agent', 'profiles.write');
